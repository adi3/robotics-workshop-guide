<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Build Simulation on AWS Location Based Services workshop featuring Amazon Location</title>
    <link>http://example.org/build-simulation/</link>
    <description>Recent content in Build Simulation on AWS Location Based Services workshop featuring Amazon Location</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 03 May 2021 13:44:16 -0500</lastBuildDate><atom:link href="http://example.org/build-simulation/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Broadcast robot description</title>
      <link>http://example.org/build-simulation/broadcast_robot_desc/</link>
      <pubDate>Mon, 03 May 2021 13:44:16 -0500</pubDate>
      
      <guid>http://example.org/build-simulation/broadcast_robot_desc/</guid>
      <description>Add the following code snippet under STEP 1 of main.launch.  &amp;lt;param name=&amp;quot;robot_description&amp;quot; command=&amp;quot;xacro $(find robomaker_workshop)/urdf/$(arg robot_model).urdf.xacro&amp;quot;&amp;gt; &amp;lt;/param&amp;gt; &amp;lt;node name=&amp;quot;robot_state_publisher&amp;quot; pkg=&amp;quot;robot_state_publisher&amp;quot; type=&amp;quot;robot_state_publisher&amp;quot;&amp;gt; &amp;lt;/node&amp;gt; Run the ROS application.  roslaunch robomaker_workshop main.launch Confirm robot information is being published.  rosparam get -p /robot_description You should see some XML output printed in the terminal that describes the form-factor and physics of the robot.</description>
    </item>
    
    <item>
      <title>Bring up simulation world</title>
      <link>http://example.org/build-simulation/bring_up_sim_world/</link>
      <pubDate>Mon, 03 May 2021 13:44:16 -0500</pubDate>
      
      <guid>http://example.org/build-simulation/bring_up_sim_world/</guid>
      <description>Add the following code snippet under STEP 2 of main.launch.  &amp;lt;include file=&amp;quot;$(find gazebo_ros)/launch/empty_world.launch&amp;quot;&amp;gt; &amp;lt;arg name=&amp;quot;world_name&amp;quot; value=&amp;quot;$(arg world_name)&amp;quot;/&amp;gt; &amp;lt;/include&amp;gt; Run the ROS application.  roslaunch robomaker_workshop main.launch Go to the virtual desktop to view our Gazebo world. You should see a black table with a few colorful coins on it. Take a few moments to familiarize yourself with the Gazebo GUI and the various options it offers.  Add the following code snippet under, once again, STEP 2 of main.</description>
    </item>
    
    <item>
      <title>Visualize robot data</title>
      <link>http://example.org/build-simulation/visualize_data/</link>
      <pubDate>Mon, 03 May 2021 13:44:16 -0500</pubDate>
      
      <guid>http://example.org/build-simulation/visualize_data/</guid>
      <description> Add the following code snippet under STEP 4 of main.launch.  &amp;lt;node name=&amp;quot;rviz&amp;quot; pkg=&amp;quot;rviz&amp;quot; type=&amp;quot;rviz&amp;quot; respawn=&amp;quot;false&amp;quot; output=&amp;quot;screen&amp;quot; args=&amp;quot;-f world -d $(find robomaker_workshop)/rviz/px100.rviz&amp;quot;&amp;gt; &amp;lt;/node&amp;gt; Run the ROS application.  roslaunch robomaker_workshop main.launch The RViz GUI should appear on the virtual desktop. Take a few moments to explore its various components, and get an understanding of how RViz shows the camera livestream from our simulated Gazebo world.  </description>
    </item>
    
    <item>
      <title>Integrate planning toolkit</title>
      <link>http://example.org/build-simulation/integrate_planning/</link>
      <pubDate>Mon, 03 May 2021 13:44:16 -0500</pubDate>
      
      <guid>http://example.org/build-simulation/integrate_planning/</guid>
      <description>Add the following code snippet under STEP 5 of main.launch.  &amp;lt;include file=&amp;quot;$(find interbotix_xsarm_moveit)/launch/move_group.launch&amp;quot;&amp;gt; &amp;lt;arg name=&amp;quot;robot_model&amp;quot; value=&amp;quot;$(arg robot_model)&amp;quot;/&amp;gt; &amp;lt;arg name=&amp;quot;dof&amp;quot; value=&amp;quot;$(arg dof)&amp;quot;/&amp;gt; &amp;lt;/include&amp;gt; Run the ROS application. No GUI changes are expected at this point.  roslaunch robomaker_workshop main.launch Confirm that the planning interface has been succesfully set up.  rostopic list | grep move_group About twenty new ROS topics should have been set up by MoveIt to allow for motion planning.</description>
    </item>
    
    <item>
      <title>Test robot movement</title>
      <link>http://example.org/build-simulation/test_movement/</link>
      <pubDate>Mon, 03 May 2021 13:44:16 -0500</pubDate>
      
      <guid>http://example.org/build-simulation/test_movement/</guid>
      <description>Add the following code snippet under STEP 6 of main.launch.  &amp;lt;node pkg=&amp;quot;robomaker_workshop&amp;quot; name=&amp;quot;init&amp;quot; type=&amp;quot;init.py&amp;quot; output=&amp;quot;screen&amp;quot; /&amp;gt; Run the ROS application.  roslaunch robomaker_workshop main.launch Check out the Gazebo window. The simulated arm should become animated and move to its sleep position.  The same effect can be achieved by running the python script independently of the launch file.
Comment out the code added under Step 6 of main.launch.  &amp;lt;!</description>
    </item>
    
    <item>
      <title>Start image capture service</title>
      <link>http://example.org/build-simulation/start_image_capture/</link>
      <pubDate>Mon, 03 May 2021 13:44:16 -0500</pubDate>
      
      <guid>http://example.org/build-simulation/start_image_capture/</guid>
      <description>Add the following code snippet under STEP 7 of main.launch.  &amp;lt;node name=&amp;quot;image_saver&amp;quot; pkg=&amp;quot;image_view&amp;quot; type=&amp;quot;image_saver&amp;quot; output=&amp;quot;screen&amp;quot;&amp;gt; &amp;lt;remap from=&amp;quot;image&amp;quot; to=&amp;quot;camera/image_raw&amp;quot; /&amp;gt; &amp;lt;param name=&amp;quot;save_all_image&amp;quot; value=&amp;quot;false&amp;quot; /&amp;gt; &amp;lt;param name=&amp;quot;filename_format&amp;quot; value=&amp;quot;$(find robomaker_workshop)/scripts/image_%04d.png&amp;quot; /&amp;gt; &amp;lt;/node&amp;gt; Run the ROS application.  roslaunch robomaker_workshop main.launch Confirm that the image capture service has started.  rosservice list | grep image_saver Of particular interest to us is the /image_saver/save service. We will be invoking this service to captures images from the live camera stream.</description>
    </item>
    
  </channel>
</rss>
